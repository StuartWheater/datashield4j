// Useful sources:
// http://www.ibm.com/developerworks/xml/library/x-javacc2/index.html
// http://www.docstoc.com/docs/22702393/Abstract-Syntax-Trees-Example-Creating-Syntax-Trees-Using-JJTree
// http://www.ibm.com/developerworks/data/library/techarticle/dm-0401brereton/
options{
   IGNORE_CASE=false;
   STATIC=false;
   MULTI=true;
   VISITOR=true;
//   DEBUG_PARSER=true;
}

PARSER_BEGIN(DataShieldGrammar)
package org.obiba.datashield.r.expr;

import java.io.*;
import java.util.*;

public class DataShieldGrammar {
}

PARSER_END(DataShieldGrammar)

SKIP:
{
   " "
|   "\t"
|   "\r"
|   "\n"
}

TOKEN : /* Numeric Constants */
{
       < NUMBER: ("-")? <FLOAT> ( ["e","E"] ([ "-","+"])? <FLOAT> )?
       >
 |     < RANGE: ( <DIGIT> )+ ":" ( <DIGIT> )+ >
 |     < #FLOAT: <INTEGER>
           | <INTEGER> ( "." <INTEGER> )?
           | "." <INTEGER>
       >
 |     < #INTEGER: ( <DIGIT> )+ ("L")?>
 |     < #DIGIT: ["0" - "9"] >
}

TOKEN:
{
      < R_IDENTIFIER: ( <LETTER> )+ ( <DIGIT> | <LETTER> | <UNDERSCORE> | <DOLLAR> | <DOT> | <MINUS> )* >
  |   < R_STRING: ( <QUOTE> ) ( <DIGIT> | <LETTER> | <UNDERSCORE> | <DOT> | <MINUS> | <SEPARATOR> | <DOLLAR> | <BRACKET> )+ ( <QUOTE> ) >
  |   < R_DBLSTRING: ( <DOUBLEQUOTE> ) ( <DIGIT> | <LETTER> | <UNDERSCORE> | <DOT> | <MINUS> | <SEPARATOR> | <DOLLAR> | <BRACKET> )+ ( <DOUBLEQUOTE> ) >
  |   < R_OPERATOR: (["/", "!", "="]) | "%*%">
  |   < F_OPERATOR: ([":"] | "%in%") >
  |   < COMMON_OPERATOR: (["+","-","*", "^"]) >
  |   < COMMA: "," >
  |   < #LETTER: ["a"-"z", "A"-"Z"] >
  |   < #SUBSET: ["0"-"9", " ", ",", ":"] >
  |   < #UNDERSCORE: "_">
  |   < #SEPARATOR: [";",":",",","_","."]>
  |   < #BRACKET: ["[", "]"] >
  |   < #DOLLAR: "$">
  |   < #MINUS: "-">
  |   < #DOT: ".">
  |   < #QUOTE: "'">
  |   < #DOUBLEQUOTE: "\"">
}

SimpleNode root() #root :
{}
{
  exp() [";"] <EOF>
  { return jjtThis;}
}

void exp() #void :
{Token op;}
{
 (  LOOKAHEAD(2)
    // Parse a formula as much as possible (A~B+C must not be parsed as (A~B) + C). This is why it comes first here.
    formula()
  | simpleExp() [ (op=<R_OPERATOR> | op=<COMMON_OPERATOR>) exp() {jjtThis.value=op.image;} #BinaryOp(2) ]
 )
}

void simpleExp() #void :
{}
{
 ( LOOKAHEAD(2)
     call()
   | string()
   | symbol()
   | "(" exp() ")"
 )
}

void call() #void :
{}
{
 ( LOOKAHEAD(2)
     funcCall()
   | subsetCall()
 )
}

void funcCall() :
{Token f;}
{
  f = <R_IDENTIFIER> "(" [ expList() ] ")" {jjtThis.value = f.image;}
}

void subsetCall() :
{Token f;}
{
  f = <R_IDENTIFIER> "[" [ subsetExpList() ] "]" {jjtThis.value = f.image;}
}

void symbol() : 
{Token s=null;}
{
 (
    s=<R_IDENTIFIER>
  | s=<NUMBER>
  | s=<RANGE>
 ) {jjtThis.value = s.image;}
}

void string() :
{Token s=null;}
{
 (
    s=<R_STRING>
  | s=<R_DBLSTRING>
 ) {jjtThis.value = s.image;}
}

void formula() #symbol :
{Token t;
 StringBuilder ft;
 StringBuilder sb = new StringBuilder();}
{
  (
    t=<R_IDENTIFIER> "~" {sb.append(t.image).append("~");}
    (
        ft=formulaTerm() {sb.append(ft);}
    )
    
  ) {jjtThis.value = sb.toString();}
}

StringBuilder formulaTerm() #void :
{
  Token t;
  StringBuilder sb,ft;
}
{
  (
      "(" sb=formulaTerm() ")"  {sb.insert(0, '(').append(')');}
    | t=<R_IDENTIFIER> {sb = new StringBuilder(t.image);}
    | t=<NUMBER> {sb = new StringBuilder(t.image);}
  )
    [ (t=<COMMON_OPERATOR> | t=<F_OPERATOR>) ft=formulaTerm() {sb.append(t.image).append(ft);} ]
  {return sb;}
}

void expList() #void :
{}
{
  ( exp() [ <COMMA> expList() ] )
}

void subsetExpList() #void :
{}
{
  (
     "[" subsetExpList() "]"
     | <COMMA> [ subsetExpList() ]
     | exp() [ subsetExpList() ]
  )
}
